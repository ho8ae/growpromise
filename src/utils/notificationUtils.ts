// src/utils/notificationUtils.ts
import { NotificationType } from '../api/modules/notification';

export interface NotificationSettings {
  isEnabled: boolean;
  permissionStatus: 'granted' | 'denied' | 'undetermined';
  canAskAgain: boolean;
}

export interface PushTokenInfo {
  token: string | null;
  isRegistered: boolean;
  lastUpdated: string | null;
}

// ÏïåÎ¶º Í¥ÄÎ†® Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
export const notificationUtils = {
  // Í∂åÌïú ÏÉÅÌÉúÏóê Îî∞Î•∏ ÌÖçÏä§Ìä∏ Î∞òÌôò
  getStatusText: (status: 'granted' | 'denied' | 'undetermined'): string => {
    switch (status) {
      case 'granted': return 'ÌóàÏö©Îê®';
      case 'denied': return 'Í±∞Î∂ÄÎê®';
      case 'undetermined': return 'ÎØ∏ÏÑ§Ï†ï';
      default: return 'Ïïå Ïàò ÏóÜÏùå';
    }
  },
  
  // Í∂åÌïú ÏÉÅÌÉúÏóê Îî∞Î•∏ ÏÉâÏÉÅ Î∞òÌôò
  getStatusColor: (status: 'granted' | 'denied' | 'undetermined'): string => {
    switch (status) {
      case 'granted': return '#58CC02';
      case 'denied': return '#FF4B4B';
      case 'undetermined': return '#FFC800';
      default: return '#E5E5E5';
    }
  },
  
  // ÏïåÎ¶º ÌÉÄÏûÖÏóê Îî∞Î•∏ ÏïÑÏù¥ÏΩò Î∞òÌôò
  getNotificationIcon: (type: NotificationType): string => {
    switch (type) {
      case NotificationType.PROMISE_CREATED: return 'üìù';
      case NotificationType.PROMISE_VERIFIED: return 'üì∏';
      case NotificationType.PROMISE_APPROVED: return '‚úÖ';
      case NotificationType.PROMISE_REJECTED: return '‚ùå';
      case NotificationType.REWARD_EARNED: return 'üéÅ';
      case NotificationType.SYSTEM: return 'üîî';
      default: return 'üì±';
    }
  },
  
  // ÏïåÎ¶º ÌÉÄÏûÖÏóê Îî∞Î•∏ ÏÉâÏÉÅ Î∞òÌôò
  getNotificationColor: (type: NotificationType): string => {
    switch (type) {
      case NotificationType.PROMISE_CREATED: return '#58CC02';
      case NotificationType.PROMISE_VERIFIED: return '#1CB0F6';
      case NotificationType.PROMISE_APPROVED: return '#58CC02';
      case NotificationType.PROMISE_REJECTED: return '#FF4B4B';
      case NotificationType.REWARD_EARNED: return '#FFC800';
      case NotificationType.SYSTEM: return '#CE82FF';
      default: return '#E5E5E5';
    }
  },
  
  // ÏïåÎ¶º Ïä§ÏºÄÏ§ÑÎßÅÏùÑ ÏúÑÌïú ÏãúÍ∞Ñ Í≥ÑÏÇ∞
  getNotificationTrigger: (date: Date): { seconds?: number; date?: Date } => {
    const now = new Date();
    const triggerTime = date.getTime() - now.getTime();
    
    if (triggerTime <= 0) {
      return { seconds: 1 };
    } else {
      return { date };
    }
  },
  
  // ÏÉÅÎåÄÏ†Å ÏãúÍ∞Ñ ÌëúÏãú (Ïòà: "5Î∂Ñ Ï†Ñ", "2ÏãúÍ∞Ñ Ï†Ñ")
  getRelativeTime: (dateString: string): string => {
    const now = new Date();
    const date = new Date(dateString);
    const diffMs = now.getTime() - date.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffMinutes < 1) return 'Î∞©Í∏à Ï†Ñ';
    if (diffMinutes < 60) return `${diffMinutes}Î∂Ñ Ï†Ñ`;
    if (diffHours < 24) return `${diffHours}ÏãúÍ∞Ñ Ï†Ñ`;
    if (diffDays < 7) return `${diffDays}Ïùº Ï†Ñ`;
    
    // 7Ïùº Ïù¥ÏÉÅÏù∏ Í≤ΩÏö∞ ÎÇ†Ïßú ÌëúÏãú
    return date.toLocaleDateString('ko-KR', {
      month: 'short',
      day: 'numeric',
    });
  },
  
  // ÏïåÎ¶º Ï§ëÏöîÎèÑÏóê Îî∞Î•∏ Ïö∞ÏÑ†ÏàúÏúÑ Î∞òÌôò
  getNotificationPriority: (type: NotificationType): 'high' | 'normal' | 'low' => {
    switch (type) {
      case NotificationType.PROMISE_VERIFIED:
      case NotificationType.PROMISE_CREATED:
        return 'high';
      case NotificationType.PROMISE_APPROVED:
      case NotificationType.REWARD_EARNED:
        return 'normal';
      case NotificationType.PROMISE_REJECTED:
      case NotificationType.SYSTEM:
        return 'low';
      default:
        return 'normal';
    }
  },
  
  // ÏïåÎ¶º ÌÉÄÏûÖÎ≥Ñ Ï†úÎ™© ÏÉùÏÑ±
  getNotificationTitle: (type: NotificationType, data?: any): string => {
    switch (type) {
      case NotificationType.PROMISE_CREATED:
        return 'ÏÉàÎ°úÏö¥ ÏïΩÏÜçÏù¥ ÏÉùÏÑ±ÎêòÏóàÏñ¥Ïöî! üìù';
      case NotificationType.PROMISE_VERIFIED:
        return 'ÏïΩÏÜç Ïù∏Ï¶ùÏù¥ ÏôÑÎ£åÎêòÏóàÏñ¥Ïöî! üì∏';
      case NotificationType.PROMISE_APPROVED:
        return 'ÏïΩÏÜçÏù¥ ÏäπÏù∏ÎêòÏóàÏñ¥Ïöî! ‚úÖ';
      case NotificationType.PROMISE_REJECTED:
        return 'ÏïΩÏÜçÏù¥ Í±∞Ï†àÎêòÏóàÏñ¥Ïöî üòî';
      case NotificationType.REWARD_EARNED:
        return 'Î≥¥ÏÉÅÏùÑ Î∞õÏïòÏñ¥Ïöî! üéÅ';
      case NotificationType.SYSTEM:
        return 'Ïë•Ïë•ÏïΩÏÜç ÏïåÎ¶º üîî';
      default:
        return 'ÏÉàÎ°úÏö¥ ÏïåÎ¶ºÏù¥ ÏûàÏñ¥Ïöî!';
    }
  },
  
  // ÎîîÎ≤ÑÍπÖÏö© - ÌòÑÏû¨ ÏãúÍ∞Ñ Ï†ïÎ≥¥
  getCurrentTimeInfo: (): { timestamp: number; iso: string; local: string } => {
    const now = new Date();
    return {
      timestamp: now.getTime(),
      iso: now.toISOString(),
      local: now.toLocaleString(),
    };
  },
  
  // ÏïåÎ¶º Î∞∞ÏßÄ Ïà´Ïûê Ìè¨Îß∑ÌåÖ (99+ ÌòïÌÉú)
  formatBadgeCount: (count: number): string => {
    if (count <= 0) return '';
    if (count > 99) return '99+';
    return count.toString();
  },
  
  // ÏïåÎ¶º Í∑∏Î£πÌïëÏùÑ ÏúÑÌïú ÌÇ§ ÏÉùÏÑ±
  getNotificationGroupKey: (type: NotificationType, relatedId?: string): string => {
    if (relatedId) {
      return `${type}_${relatedId}`;
    }
    return type;
  },
  
  // ÏïåÎ¶º ÎÇ¥Ïö© ÏöîÏïΩ (Í∏¥ ÎÇ¥Ïö©ÏùÑ Ï§ÑÏó¨ÏÑú ÌëúÏãú)
  truncateContent: (content: string, maxLength: number = 100): string => {
    if (content.length <= maxLength) return content;
    return content.substring(0, maxLength) + '...';
  },
  
  // Ìë∏Ïãú ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
  isValidExpoPushToken: (token: string): boolean => {
    // Expo Ìë∏Ïãú ÌÜ†ÌÅ∞ ÌòïÏãù: ExponentPushToken[xxxxxx]
    const expoTokenRegex = /^ExponentPushToken\[[A-Za-z0-9_-]+\]$/;
    return expoTokenRegex.test(token);
  },
  
  // ÏïåÎ¶º ÏÑ§Ï†ï ÏÉÅÌÉú ÏöîÏïΩ ÌÖçÏä§Ìä∏
  getSettingsSummary: (settings: NotificationSettings, pushInfo: PushTokenInfo): string => {
    if (!settings.isEnabled) {
      return 'ÏïåÎ¶ºÏù¥ ÎπÑÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§';
    }
    
    if (!pushInfo.isRegistered) {
      return 'Ìë∏Ïãú ÌÜ†ÌÅ∞ Îì±Î°ù Ï§ëÏûÖÎãàÎã§';
    }
    
    return 'Î™®Îì† ÏïåÎ¶ºÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§';
  },
  
  // ÏïåÎ¶º Ï±ÑÎÑê ID ÏÉùÏÑ± (AndroidÏö©)
  getNotificationChannelId: (type: NotificationType): string => {
    switch (type) {
      case NotificationType.PROMISE_CREATED:
      case NotificationType.PROMISE_VERIFIED:
      case NotificationType.PROMISE_APPROVED:
      case NotificationType.PROMISE_REJECTED:
        return 'promise';
      case NotificationType.REWARD_EARNED:
        return 'reward';
      case NotificationType.SYSTEM:
      default:
        return 'default';
    }
  },
  

  
  // ÏïåÎ¶º ÏßÑÎèô Ìå®ÌÑ¥ Î∞òÌôò (AndroidÏö©)
  getVibrationPattern: (type: NotificationType): number[] => {
    switch (type) {
      case NotificationType.PROMISE_APPROVED:
      case NotificationType.REWARD_EARNED:
        return [0, 200, 100, 200]; // ÏßßÏùÄ ÏßÑÎèô 2Î≤à
      case NotificationType.PROMISE_REJECTED:
        return [0, 500, 200, 500, 200, 500]; // Í∏¥ ÏßÑÎèô 3Î≤à
      case NotificationType.PROMISE_CREATED:
      case NotificationType.PROMISE_VERIFIED:
        return [0, 250, 250, 250]; // Ï§ëÍ∞Ñ ÏßÑÎèô 1Î≤à
      default:
        return [0, 250]; // Í∏∞Î≥∏ ÏßÑÎèô
    }
  },
};