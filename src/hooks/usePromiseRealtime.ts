// src/hooks/usePromiseRealtime.ts
import { useCallback } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import * as Haptics from 'expo-haptics';

/**
 * ÏïΩÏÜç Í¥ÄÎ†® Ïã§ÏãúÍ∞Ñ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌïú Ïª§Ïä§ÌÖÄ ÌõÖ
 */
export const usePromiseRealtime = () => {
  const queryClient = useQueryClient();

  // ÏïΩÏÜç Ïù∏Ï¶ù Ï†úÏ∂ú ÌõÑ Îç∞Ïù¥ÌÑ∞ Í∞±Ïã†
  const onPromiseVerificationSubmitted = useCallback((assignmentId?: string, childId?: string) => {
    console.log('üîÑ Promise verification submitted, refreshing data...');
    
    // ÌñÖÌã± ÌîºÎìúÎ∞±
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
    
    // Î™®Îì† Í¥ÄÎ†® ÏøºÎ¶¨ Î¨¥Ìö®ÌôîÌïòÏó¨ ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î°ú Í∞±Ïã†
    const queriesToInvalidate = [
      // Í∏∞Î≥∏ ÏïΩÏÜç Í¥ÄÎ†® ÏøºÎ¶¨Îì§
      ['todayPromises'],
      ['promiseStats'],
      ['currentPlant'],
      ['childPromises'],
      ['parentPromises'],
      ['pendingVerifications'],
      
      // ÏûêÎÖÄÎ≥Ñ ÏøºÎ¶¨Îì§ (childIdÍ∞Ä ÏûàÎäî Í≤ΩÏö∞)
      ...(childId ? [
        ['todayPromises', 'CHILD', childId],
        ['todayPromises', 'PARENT', childId],
        ['promiseStats', childId],
        ['currentPlant', 'PARENT', childId],
      ] : []),
    ];

    // ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÏøºÎ¶¨ Î¨¥Ìö®Ìôî
    queriesToInvalidate.forEach(queryKey => {
      queryClient.invalidateQueries({ queryKey });
    });

    // Ï¶âÏãú ÏÉàÎ°úÍ≥†Ïπ®Ïù¥ ÌïÑÏöîÌïú Ï§ëÏöîÌïú ÏøºÎ¶¨Îì§ÏùÄ refetch
    const criticalQueries = [
      ['todayPromises'],
      ['promiseStats'],
    ];

    criticalQueries.forEach(queryKey => {
      queryClient.refetchQueries({ queryKey });
    });

  }, [queryClient]);

  // ÏïΩÏÜç ÏäπÏù∏/Í±∞Ï†à ÌõÑ Îç∞Ïù¥ÌÑ∞ Í∞±Ïã†
  const onPromiseVerificationResponded = useCallback((assignmentId: string, approved: boolean) => {
    console.log(`üîÑ Promise verification ${approved ? 'approved' : 'rejected'}, refreshing data...`);
    
    // ÌñÖÌã± ÌîºÎìúÎ∞±
    Haptics.notificationAsync(
      approved 
        ? Haptics.NotificationFeedbackType.Success 
        : Haptics.NotificationFeedbackType.Warning
    );
    
    // ÏïΩÏÜç Í¥ÄÎ†® Î™®Îì† Îç∞Ïù¥ÌÑ∞ Í∞±Ïã†
    queryClient.invalidateQueries({ queryKey: ['todayPromises'] });
    queryClient.invalidateQueries({ queryKey: ['promiseStats'] });
    queryClient.invalidateQueries({ queryKey: ['pendingVerifications'] });
    queryClient.invalidateQueries({ queryKey: ['currentPlant'] });
    queryClient.invalidateQueries({ queryKey: ['childPromises'] });
    
    // ÏãùÎ¨º Í≤ΩÌóòÏπò Í¥ÄÎ†® ÏøºÎ¶¨ÎèÑ Í∞±Ïã† (ÏäπÏù∏Îêú Í≤ΩÏö∞)
    if (approved) {
      queryClient.invalidateQueries({ queryKey: ['plantStats'] });
      queryClient.invalidateQueries({ queryKey: ['characterLevel'] });
    }
  }, [queryClient]);

  // ÏïΩÏÜç ÏÉùÏÑ± ÌõÑ Îç∞Ïù¥ÌÑ∞ Í∞±Ïã†
  const onPromiseCreated = useCallback(() => {
    console.log('üîÑ New promise created, refreshing data...');
    
    queryClient.invalidateQueries({ queryKey: ['todayPromises'] });
    queryClient.invalidateQueries({ queryKey: ['promiseStats'] });
    queryClient.invalidateQueries({ queryKey: ['parentPromises'] });
    queryClient.invalidateQueries({ queryKey: ['childPromises'] });
  }, [queryClient]);

  // ÏãùÎ¨º Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ Í∞±Ïã†
  const onPlantDataChanged = useCallback(() => {
    console.log('üîÑ Plant data changed, refreshing...');
    
    queryClient.invalidateQueries({ queryKey: ['currentPlant'] });
    queryClient.invalidateQueries({ queryKey: ['plantStats'] });
    queryClient.invalidateQueries({ queryKey: ['plantCollection'] });
  }, [queryClient]);

  // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®
  const refreshAllData = useCallback(async () => {
    console.log('üîÑ Manual refresh triggered');
    
    try {
      await Promise.all([
        queryClient.refetchQueries({ queryKey: ['todayPromises'] }),
        queryClient.refetchQueries({ queryKey: ['promiseStats'] }),
        queryClient.refetchQueries({ queryKey: ['currentPlant'] }),
        queryClient.refetchQueries({ queryKey: ['pendingVerifications'] }),
      ]);
      
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:', error);
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
    }
  }, [queryClient]);

  return {
    onPromiseVerificationSubmitted,
    onPromiseVerificationResponded,
    onPromiseCreated,
    onPlantDataChanged,
    refreshAllData,
  };
};